name: Cross-Platform Build
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            compiler: clang++
            build_type: Release
          - os: ubuntu-latest
            compiler: clang++
            build_type: Release
          - os: macos-latest
            compiler: clang++
            build_type: Release
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Perl Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        choco install strawberryperl
        cpan install Pod::Usage

    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libgl1-mesa-dev \
          libglfw3-dev \
          pkg-config \
          clang

    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install glfw
        brew install llvm
        brew install pkg-config

    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-glfw
          mingw-w64-x86_64-opengl-headers
          mingw-w64-x86_64-clang

    - name: Build
      working-directory: ./src
      shell: bash
      run: |
        mkdir -p build bin
        make clean
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          CXX=clang++ \
          CXXFLAGS="-I/mingw64/include -I/mingw64/include/glfw" \
          LDFLAGS="-L/mingw64/lib" \
          make
        else
          CXX=${{ matrix.compiler }} make
        fi

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: TemuBuku-${{ matrix.os }}
        path: |
          src/bin/TemuBuku*
        if-no-files-found: error

    - name: Test Run
      working-directory: ./src/bin
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./TemuBuku.exe --version || true
        else
          ./TemuBuku --version || true
        fi