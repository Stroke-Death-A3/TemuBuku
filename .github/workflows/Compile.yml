name: Cross-Platform Build
on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]
jobs:
  build-unix:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            compiler: clang++
            build_type: Release
          - os: macos-latest
            compiler: clang++
            build_type: Release
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libgl1-mesa-dev \
          libglfw3-dev \
          libglfw3 \
          pkg-config \
          clang \
          libglu1-mesa-dev \
          mesa-common-dev
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install glfw
        brew install llvm
        brew install pkg-config
    
    - name: Build
      working-directory: ./src
      shell: bash
      run: |
        mkdir -p build bin
        make clean
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          CXX=${{ matrix.compiler }} \
          CXXFLAGS="-I/usr/local/include -I/opt/homebrew/include" \
          make
        else
          CXX=${{ matrix.compiler }} \
          CXXFLAGS="-I/usr/include/GLFW" \
          make
        fi

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: TemuBuku-${{ matrix.os }}-${{ github.ref_name }}
        path: |
          src/bin/TemuBuku*
        if-no-files-found: error
    - name: Test Run
      working-directory: ./src/bin
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./TemuBuku.exe --version || true
        else
          ./TemuBuku --version || true
        fi

  build-windows:
    name: Windows (VS2022)
    runs-on: windows-latest
    timeout-minutes: 4
    env:
      CFLAGS: /WX
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Install GLFW
        run: |
          git clone https://github.com/glfw/glfw.git
          cd glfw
          cmake -B build -G "Visual Studio 17 2022" -A x64
          cmake --build build --config Release --target install

      - name: Configure Win32 shared x86 library
        run: |
          cmake -B build-win32-shared-x86 -G "Visual Studio 17 2022" -A Win32 -D BUILD_SHARED_LIBS=ON \
                -D CMAKE_PREFIX_PATH="C:/Program Files (x86)/GLFW" .

      - name: Build Win32 shared x86 library
        run: cmake --build build-win32-shared-x86 --config Release --parallel

      - name: Configure Win32 static x64 library
        run: cmake -B build-win32-static-x64 -G "Visual Studio 17 2022" -A x64 .

      - name: Build Win32 static x64 library
        run: cmake --build build-win32-static-x64 --config Release --parallel

      - name: Configure Win32 shared x64 library
        run: cmake -B build-win32-shared-x64 -G "Visual Studio 17 2022" -A x64 -D BUILD_SHARED_LIBS=ON .

      - name: Build Win32 shared x64 library
        run: cmake --build build-win32-shared-x64 --config Release --parallel

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: TemuBuku-windows-${{ github.ref_name }}
          path: |
            build-win32-shared-x64/Release/TemuBuku.exe
            build-win32-shared-x64/Release/*.dll
          if-no-files-found: error

  release:
    needs: [build-unix, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/TemuBuku-ubuntu-latest-${{ github.ref_name }}/TemuBuku
            artifacts/TemuBuku-windows-${{ github.ref_name }}/TemuBuku.exe
            artifacts/TemuBuku-macos-latest-${{ github.ref_name }}/TemuBuku
          draft: false
          prerelease: false
          generate_release_notes: true