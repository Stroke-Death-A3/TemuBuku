name: Cross-Platform Build
on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            compiler: clang++
            build_type: Release
          - os: ubuntu-latest
            compiler: clang++
            build_type: Release
          - os: macos-latest
            compiler: clang++
            build_type: Release
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Perl Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        choco install strawberryperl
        refreshenv
        cpan install Pod::Usage
        perl -v
    
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libgl1-mesa-dev \
          libglfw3-dev \
          libglfw3 \
          pkg-config \
          clang \
          libglu1-mesa-dev \
          mesa-common-dev
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install glfw
        brew install llvm
        brew install pkg-config
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        git clone https://github.com/microsoft/vcpkg
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg install glfw3:x64-windows
        .\vcpkg\vcpkg install opengl:x64-windows
        .\vcpkg\vcpkg integrate install

    - name: Setup MSBuild
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Build
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          export VCPKG_ROOT="${GITHUB_WORKSPACE}/vcpkg"
          cmake -B build \
                -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
                -DCMAKE_BUILD_TYPE=Release \
                -DVCPKG_TARGET_TRIPLET=x64-windows \
                -DVCPKG_ROOT="${VCPKG_ROOT}"
          cmake --build build --config Release
        else
          cd src
          mkdir -p build bin
          make clean
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            CXX=${{ matrix.compiler }} CXXFLAGS="-I/usr/local/include -I/opt/homebrew/include" make
          else
            CXX=${{ matrix.compiler }} CXXFLAGS="-I/usr/include/GLFW" make
          fi
        fi

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: TemuBuku-${{ matrix.os }}-${{ github.ref_name }}
        path: |
          ${{ matrix.os == 'windows-latest' && 'build/Release/TemuBuku.exe' || 'src/bin/TemuBuku*' }}
        if-no-files-found: error
    - name: Test Run
      working-directory: ./src/bin
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./TemuBuku.exe --version || true
        else
          ./TemuBuku --version || true
        fi

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/TemuBuku-ubuntu-latest-${{ github.ref_name }}/TemuBuku
            artifacts/TemuBuku-windows-latest-${{ github.ref_name }}/TemuBuku.exe
            artifacts/TemuBuku-macos-latest-${{ github.ref_name }}/TemuBuku
          draft: false
          prerelease: false
          generate_release_notes: true